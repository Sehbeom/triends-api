<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.triends.domain.review.mapper.ReviewMapper">
    <resultMap id="reviewDto" type="reviewDto">
        <result column="review_id" property="reviewId"/>
        <result column="subject" property="subject"/>
        <result column="plan_id" property="planId"/>
        <result column="title" property="planTitle"/>
        <result column="content" property="content"/>
        <result column="user_id" property="userId"/>
        <result column="name" property="userName"/>
        <result column="created_at" property="createdAt"/>
        <result column="modified_at" property="modifiedAt"/>
        <result column="likes" property="likes"/>
        <result column="scrapped" property="scrapped"/>
        <result property="canLike" column="can_like" />
    </resultMap>

    <resultMap id="attractionRateDto" type="attractionRateDto">
        <result property="ratesId" column="rates_id" />
        <result property="userId" column="user_id" />
        <result property="contentId" column="content_id" />
        <result property="reviewId" column="review_id" />
    </resultMap>

    <resultMap id="reviewWithPlan" type="reviewDto" extends="reviewDto">
        <association property="planInfo" column="plan_id" select="selectForReviewWithPlan" />
        <collection property="rateInfo" column="review_id" select="selectForRateInfo" />
    </resultMap>

    <select id="selectForReviewWithPlan" resultMap="planWithDays">
        select plan_id, title, start_date, end_date, center_lat, center_lng, thumbnail
        from plan
        where plan_id=#{planId}
    </select>

    <select id="selectForRateInfo" resultMap="attractionRateDto">
        select ra.rates_id, ra.user_id, ra.content_id, ra.score, ra.review_id
        from rates ra, review r
        where
            r.review_id=#{reviewId} and
            r.review_id=ra.review_id and
            r.user_id=ra.user_id
    </select>

    <resultMap id="onlyPlan" type="planDto">
        <result property="planId" column="plan_id" />
        <result property="title" column="title" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="centerLat" column="center_lat" />
        <result property="centerLng" column="center_lng" />
        <result property="thumbnail" column="thumbnail" />
    </resultMap>

    <resultMap id="planWithDays" type="planDto" extends="onlyPlan">
        <collection property="days" column="plan_id" javaType="list" ofType="dayWithCourse" select="selectForPlanWithDays" />
    </resultMap>

    <select id="selectForPlanWithDays" resultMap="dayWithCourse">
        select days_id, plan_id, day_info
        from days
        where plan_id=#{planId}
    </select>

    <resultMap id="onlyDay" type="dayDto">
        <result property="daysId" column="days_id" />
        <result property="planId" column="plan_id" />
        <result property="dayInfo" column="day_info" />
    </resultMap>

    <resultMap id="dayWithCourse" type="dayDto" extends="onlyDay">
        <collection property="courses" column="days_id" javaType="list" ofType="courseWithAttraction" select="selectForDayWithCourse" />
    </resultMap>

    <select id="selectForDayWithCourse" resultMap="courseWithAttraction">
        select course_id, days_id, content_id, start_time, end_time
        from course
        where days_id=#{daysId}
    </select>

    <resultMap id="onlyCourse" type="courseDto">
        <result property="courseId" column="course_id" />
        <result property="daysId" column="days_id" />
        <result property="contentId" column="content_id" />
        <result property="startTime" column="start_time" />
        <result property="endTime" column="end_time" />
    </resultMap>

    <resultMap id="courseWithAttraction" type="courseDto" extends="onlyCourse">
        <association property="attractionDto" column="content_id" select="selectForCourseWithAttraction" />
    </resultMap>

    <resultMap id="onlyAttraction" type="attractionDto">
        <result property="contentId" column="content_id"/>
        <result property="contentTypeId" column="content_type_id"/>
        <result property="title" column="title"/>
        <result property="description" column="overview" />
        <result property="addr1" column="addr1"/>
        <result property="addr2" column="addr2"/>
        <result property="zipCode" column="zipcode"/>
        <result property="tel" column="tel"/>
        <result property="firstImage" column="first_image"/>
        <result property="firstImage2" column="first_image2"/>
        <result property="readCount" column="readcount"/>
        <result property="sidoCode" column="sido_code"/>
        <result property="gugunCode" column="gugun_code"/>
        <result property="latitude" column="latitude"/>
        <result property="longitude" column="longitude"/>
        <result property="mlevel" column="mlevel"/>
    </resultMap>

    <select id="selectForCourseWithAttraction" resultMap="onlyAttraction">
        select
            ai.content_id,
            ai.content_type_id,
            ai.title,
            ad.overview,
            ai.addr1,
            ai.addr2,
            ai.zipcode,
            ai.tel,
            ai.first_image,
            ai.readcount,
            ai.sido_code,
            ai.gugun_code,
            ai.latitude,
            ai.longitude,
            ai.mlevel
        from attraction_info ai, attraction_description ad
        where ai.content_id=#{contentId} and ai.content_id=ad.content_id
    </select>
    
    <resultMap id="listItemOnlyReviewAndPlan" type="reviewListItemDto">
        <result property="reviewId" column="review_id" />
        <result property="subject" column="subject" />
        <result property="content" column="content" />
        <result property="writerId" column="user_id" />
        <result property="writerName" column="name" />
        <result property="planId" column="plan_id" />
        <result property="likes" column="likes" />
        <result property="scrapped" column="scrapped" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="thumbnail" column="thumbnail" />
    </resultMap>

    <resultMap id="listItemReviewAndPlanWithCourses" type="reviewListItemDto" extends="listItemOnlyReviewAndPlan">
        <collection property="attractions" column="plan_id" ofType="String" javaType="list" select="selectForListItemReviewAndPlanWithCourses" />
    </resultMap>

    <select id="selectForListItemReviewAndPlanWithCourses" parameterType="int" resultType="String">
        select ai.title
        from days d, course c, attraction_info ai
        where
            d.plan_id=#{planId} and
            d.days_id=c.days_id and
            c.content_id=ai.content_id
        order by d.day_info, c.start_time
    </select>

    <select id="orderedList" parameterType="String" resultMap="listItemReviewAndPlanWithCourses">
        select r.review_id, r.subject, r.content, r.user_id, u.name, r.plan_id, p.start_date, p.end_date, p.thumbnail, r.likes, r.scrapped
        from review r, plan p, users u
        where r.plan_id=p.plan_id and r.user_id=u.user_id
        <if test="'latest'.equals(order)">
            order by r.created_at desc
        </if>
        <if test="'subject'.equals(order)">
            order by r.subject
        </if>
        <if test="'likes'.equals(order)">
            order by r.likes desc
        </if>
        <if test="'scrapped'.equals(order)">
            order by r.scrapped desc
        </if>
    </select>

    <select id="detailReview" parameterType="map" resultMap="reviewWithPlan">
        select
            r.review_id,
            r.subject,
            r.content,
            r.user_id,
            u.name,
            r.plan_id,
            r.created_at,
            r.modified_at,
            r.likes,
            r.scrapped
            <if test="userId != null">
               ,
               case
                   when <include refid="checkLiked" /> = 0 then "true"
                    else "false"
               end as "can_like"
            </if>
        from review r, users u
        where review_id=#{reviewId} and r.user_id=u.user_id
    </select>

    <sql id="checkLiked">
        (select count(*) from user_like_review where user_id=#{userId} and review_id=#{reviewId})
    </sql>

    <insert id="writeReview" parameterType="reviewDto" useGeneratedKeys="true" keyProperty="reviewId">
        insert into review (subject, content, user_id, plan_id) values
        (#{subject}, #{content} ,#{userId}, #{planId})
    </insert>

    <select id="myReviews" parameterType="int" resultMap="reviewDto">
        select r.review_id, r.subject, r.content, r.user_id, u.name, r.plan_id, p.title, r.created_at, r.modified_at, r.likes, r.scrapped
        from review r
            join users u on r.user_id=u.user_id
            join plan p on r.plan_id=p.plan_id
        where r.user_id=#{userId}
        order by created_at desc
    </select>

    <update id="modifyReview" parameterType="reviewDto">
        update review
        set subject=#{subject}, content=#{content}
        where review_id=#{reviewId};
    </update>

    <delete id="deleteReview" parameterType="int">
        delete from review where review_id=#{reviewId}
    </delete>

    <insert id="insertToUserLikeReview" parameterType="map">
        insert into user_like_review (user_id, review_id)
        values (#{userId}, #{reviewId})
    </insert>

    <update id="increaseReviewLikes" parameterType="int">
        update review
        set likes = likes + 1
        where review_id=#{reviewId}
    </update>

    <delete id="deleteFromUserLikeReview" parameterType="map">
        delete from user_like_review
        where user_id=#{userId} and review_id=#{reviewId}
    </delete>

    <update id="decreaseReviewLikes" parameterType="int">
        update review
        set likes = likes - 1
        where review_id=#{reviewId}
    </update>

    <update id="increaseReviewScrapped" parameterType="int">
        update review
        set scrapped = scrapped + 1
        where review_id=#{reviewId}
    </update>
</mapper>