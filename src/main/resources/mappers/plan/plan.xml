<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.triends.domain.plan.mapper.PlanMapper">

    <resultMap id="onlyPlan" type="planDto">
        <result property="planId" column="plan_id" />
        <result property="title" column="title" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="centerLat" column="center_lat" />
        <result property="centerLng" column="center_lng" />
        <result property="thumbnail" column="thumbnail" />
    </resultMap>

    <resultMap id="planWithDays" type="planDto" extends="onlyPlan">
        <collection property="days" column="plan_id" javaType="list" ofType="dayWithCourse" select="selectForPlanWithDays" />
    </resultMap>

    <select id="selectForPlanWithDays" resultMap="dayWithCourse">
        select days_id, plan_id, day_info
        from days
        where plan_id=#{planId}
    </select>

    <resultMap id="onlyDay" type="dayDto">
        <result property="daysId" column="days_id" />
        <result property="planId" column="plan_id" />
        <result property="dayInfo" column="day_info" />
    </resultMap>

    <resultMap id="dayWithCourse" type="dayDto" extends="onlyDay">
        <collection property="courses" column="days_id" javaType="list" ofType="courseWithAttraction" select="selectForDayWithCourse" />
    </resultMap>

    <select id="selectForDayWithCourse" resultMap="courseWithAttraction">
        select course_id, days_id, content_id, start_time, end_time
        from course
        where days_id=#{daysId}
    </select>

    <resultMap id="onlyCourse" type="courseDto">
        <result property="courseId" column="course_id" />
        <result property="daysId" column="days_id" />
        <result property="contentId" column="content_id" />
        <result property="startTime" column="start_time" />
        <result property="endTime" column="end_time" />
    </resultMap>

    <resultMap id="courseWithAttraction" type="courseDto" extends="onlyCourse">
        <association property="attractionDto" column="content_id" select="selectForCourseWithAttraction" />
    </resultMap>

    <select id="selectForCourseWithAttraction" resultType="attractionDto">
        select content_id, content_type_id, title, addr1, addr2, zipcode, tel, first_image, readcount, sido_code, gugun_code, latitude, longitude, mlevel
        from attraction_info
        where content_id=#{contentId}
    </select>

    <select id="getMyPlanList" resultMap="onlyPlan" parameterType="int">
        select p.plan_id, p.title, p.start_date, p.end_date, p.center_lat, p.center_lng, p.thumbnail
        from plan p, members m
        where
            m.user_id=#{userId} and
            m.plan_id=p.plan_id
        order by p.plan_id desc
    </select>

    <select id="getPlanDetail" resultMap="planWithDays" parameterType="int">
        select plan_id, title, start_date, end_date, center_lat, center_lng, thumbnail
        from plan
        where plan_id=#{planId}
    </select>

    <delete id="delete" parameterType="int">
        delete from plan
        where plan_id=#{planId}
    </delete>

    <insert id="createPlan" parameterType="map" useGeneratedKeys="true" keyProperty="plan.planId">
        insert into plan (title, start_date, end_date, center_lat, center_lng, thumbnail)
        values (
                #{plan.title},
                #{plan.startDate},
                #{plan.endDate},
                <include refid="makeCenterLat" />,
                <include refid="makeCenterLng" />,
                <include refid="makeThumbnail" />
                )
    </insert>

    <sql id="makeCenterLat">
        (select avg(latitude) from attraction_info where content_id in
            <foreach collection="contentIds" item="contentId" index="index" open="(" close=")" separator=",">
                #{contentId}
            </foreach>
            )
    </sql>

    <sql id="makeCenterLng">
        (select avg(longitude) from attraction_info where content_id in
        <foreach collection="contentIds" item="contentId" index="index" open="(" close=")" separator=",">
            #{contentId}
        </foreach>
        )
    </sql>

    <sql id="makeThumbnail">
        (select first_image from attraction_info where content_id in
        <foreach collection="contentIds" item="contentId" index="index" open="(" close=")" separator=",">
            #{contentId}
        </foreach>
        and first_image is not null
        limit 1)
    </sql>

    <insert id="insertMembers" parameterType="map">
        insert into members (plan_id, user_id)
        values
            <foreach collection="userIds" item="userId" index="index" separator=",">
                (#{plan.planId}, #{userId})
            </foreach>
    </insert>

    <insert id="createDay" parameterType="dayDto" useGeneratedKeys="true" keyProperty="daysId">
        insert into days (plan_id, day_info)
        values (#{planId}, #{dayInfo})
    </insert>

    <insert id="createCourse" parameterType="courseDto">
        insert into course (days_id, content_id, start_time, end_time)
        values (#{daysId}, #{contentId}, #{startTime}, #{endTime})
    </insert>

    <insert id="acceptMember" parameterType="map">
        insert into members (plan_id, user_id)
        values (#{planId}, #{userId})
    </insert>

    <select id="getRecommendPlans" parameterType="map" resultMap="dayWithCourse">
        select d.days_id, d.plan_id, d.day_info
        from
            days d,
            plan p,
            review r
        where
            (d.plan_id=p.plan_id) and
            (p.center_lat between #{swLat} and #{neLat}) and
            (p.center_lng between #{swLng} and #{neLng}) and
            (r.plan_id=p.plan_id)
        order by r.likes desc;
    </select>
</mapper>