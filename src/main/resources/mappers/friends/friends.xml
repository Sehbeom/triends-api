<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.triends.domain.friends.mapper.FriendsMapper">
  <resultMap type="userDto" id="userDto">
    <result column="user_id" property="userId"/>
    <result column="id" property="id"/>
    <result column="name" property="name"/>
    <result column="tel" property="tel"/>
    <result column="profileimg" property="profileimg"/>
    <result column="email" property="email"/>
  </resultMap>

  <insert id="acceptFriend" parameterType="map">
    insert into friends (user1, user2)
    values (#{receiverId}, #{senderId})
  </insert>

  <select id="getFriendsList" parameterType="int" resultMap="userDto">
    select user_id, id, name, tel, profileimg, email
    from users
    where
        user_id in <include refid="findFriendIds" />
  </select>

  <sql id="findFriendIds">
    (select case
             when user1 = #{userId} then user2
             else user1
             end as friend_id
    from friends f
    where
      user1 = #{userId} or
      user2 = #{userId})
  </sql>

  <delete id="deleteFriend" parameterType="map">
    delete from friends
    where
        (user1=#{userId} and user2=#{friendId}) or
        (user1=#{friendId} and user2=#{userId})
  </delete>

  <select id="getRecommendFriendsFromPreferenceSimilarity" parameterType="list" resultMap="userDto">
    select
    user_id, id, name, tel, profileimg, email
    from users
    where
      (user_id in
      <foreach collection="similarUserIds" item="similarUserId" open="(" close=")" separator=",">#{similarUserId}
      </foreach>)
    and
    (user_id not in <include refid="findFriendIds" />)
    order by field(user_id,
                    <foreach collection="similarUserIds" item="similarUserId" separator=",">
                    #{similarUserId}
                    </foreach>)
    limit 8;
  </select>

  <select id="getRecommendFriendsFromFriendsList" parameterType="list" resultMap="userDto">
    select
        user_id, id, name, tel, profileimg, email, fc.each_count
    from
        users u,
        <include refid="getFriendIdsAndCount" /> fc
    where
        u.user_id = fc.friend_id
    order by fc.each_count desc
    limit 8;
  </select>

  <sql id="getFriendIdsAndCount">
    (select
        friend_id, count(friend_id) as each_count
    from
        <include refid="getFriendIds" /> knowtogether
    where
        friend_id not in <include refid="findFriendIds"></include>
    group by friend_id)
  </sql>

  <sql id="getFriendIds">
    (select
            case
                when user1 in <include refid="friendsListForeach" /> then user2
                else user1
            end as friend_id
    from
        friends
    where
        (user1 in <include refid="friendsListForeach" />
        or
        user2 in <include refid="friendsListForeach" />)
      and
        (user1 != 2
        and
        user2 != 2))
  </sql>

  <sql id="friendsListForeach">
    <foreach collection="friendsList" item="friend" open="(" close=")" separator=",">
      #{friend.userId}
    </foreach>
  </sql>
</mapper>